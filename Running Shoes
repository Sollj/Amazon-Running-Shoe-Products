CREATE DATABASE IF NOT EXISTS Running Shoes;
 
USE running_shoes;

DROP TABLE Running_Shoes;

 CREATE TABLE Running_Shoes(
	id INT AUTO_INCREMENT PRIMARY KEY,
    Brand VARCHAR(255),
    Product_Name VARCHAR(255),
    Product_Price NUMERIC(10,2),
    Purchase_in_past_month INT,
    Total_Reviews INT,
    AVG_Rating NUMERIC(10,1),
    Date_Uploaded DATE
    );
    
LOAD DATA INFILE "C:\\ProgramData\\MySQL\\MySQL Server 5.7\\Uploads\\Running Shoes Dirty Data.csv" 
INTO TABLE Running_Shoes
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES;


--2080 total rows
    SELECT *
    FROM running_shoes
    LIMIT 2100;



                                            -------Cleaning the dataset-------

--  When deleting duplicates we will consider only the entries that have the same Brand, Product_Name, Product_Price, and Total_reviews.
--  We will not consider Purchases_in_past_month because if 2 rows have the same information for each column but different purchases_in_past_month
--this would imply a different shop selling the product. As well, if 2 rows have the same amount of total_reviews, price, and product name this
--would also imply that when using the python web scraper we grabbed 2 of the same posts for running shoes. Redudent data, that can skew results.
-- We will be considering Brand because some products of certain brands carry generic product names like "Men's running shoe", this product name could apply to multiple brands.


--Checking for duplicates in brand, product_name, product_price, Purchase_in_past_month, and total reviews
--162 rows with > 1 duplicate

SELECT Brand, Product_Name, Product_Price, Total_Reviews, COUNT(*) AS duplicate_count
FROM running_shoes
GROUP BY Brand, Product_Name, Product_Price, Total_Reviews
HAVING COUNT (*) > 1
LIMIT 2000;

--Creating a subquery to total our duplicate_count column and find how many duplicates we have with the same brand, product name, product price, and total reviews.
--406 summed rows with a duplicate > 1

SELECT 
    SUM(duplicate_count) AS total_duplicate_count
FROM (
    SELECT 
        COUNT(*) AS duplicate_count
        FROM running_shoes
        GROUP BY Brand, Product_Name, Product_Price, Total_Reviews
        HAVING COUNT(*) > 1
        LIMIT 2000
) AS subquery;




            --Deleting our duplicates we discovered with the above queries, using a self join statement

--Using RS1 and RS2 as aliases we create an (INNER) JOIN with the condition that Product_Name, Product_Price, and Total_Reviews must be equal in
--both RS1 and RS2 aliases.
--Our WHERE clause ensures that we are comparing different rows and not the same row itself and keeping only the row with the lowest id.

DELETE RS1
FROM Running_Shoes RS1
JOIN Running_Shoes RS2 ON RS1.Brand = RS2.Brand 
    AND RS1.Product_Name = RS2.Product_Name 
    AND RS1.Product_Price = RS2.Product_Price
    AND RS1.Total_Reviews = RS2.Total_Reviews
WHERE RS1.id < RS2.id;


--Checking our updated table to make sure we removed the appropriate rows and kept the ones we want.
--We started with 2080 rows, we now have 1836. 2080 - 1836 = 244.
--We used the SUM and COUNT function to find 406 total duplicates and 162 total rows with duplicates. 406 - 162 = 244.
--This implies we kept the rows we needed and deleted the duplicates we did not need.
--244 duplicates removed

SELECT *
FROM running_shoes
LIMIT 2100;


            --Deleting entries that don't fit the criteria of an adult running shoe.

 --Querying for entries that contain products for 'baby' 'kids', 'kid', 'children', or 'child' because we are only looking at products for adult sizes.
--6 rows contain these key words.
SELECT Product_Name
FROM running_shoes
WHERE Product_Name LIKE '%child%' 
OR Product_Name LIKE '%children%'
OR Product_Name LIKE '%kid%'
OR Product_Name LIKE '%baby%';


--Created a backup table (RS2) and used a DELETE FROM subquery to delete all entries containing products for 'baby' 'kids', 'kid', 'children', or 'child' (6 were deleted)
--from the running_shoes table that matched in the back up table RS2.

DELETE FROM running_shoes
WHERE Product_Name IN (
    SELECT RS2.Product_Name
    FROM (
        SELECT Product_Name
        FROM running_shoes
        WHERE Product_Name LIKE '%child%' 
        OR Product_Name LIKE '%kid%'
        OR Product_Name LIKE '%children%'
        OR Product_Name LIKE '%kids%'
    ) AS RS2
);


            --Adding new columns to our table for further analysis.

ALTER TABLE running_shoes
ADD COLUMN Gender VARCHAR (255),
ADD COLUMN Category VARCHAR (255);


            --Gender Column--

--Inserting the appropriate data for each row in our new column by using a LIKE condition to check the Product_Name column

UPDATE running_shoes
SET Gender =
    CASE
        WHEN Product_Name LIKE "%Women's%" THEN "Women's"
        WHEN Product_Name LIKE '%Women%' THEN "Women's"
        WHEN Product_Name LIKE '%Unisex%' THEN 'Unisex'
        WHEN Product_Name LIKE "%Men's%" THEN "Men's"
        WHEN Product_Name LIKE '%Mens%' THEN "Men's"
        WHEN Product_Name LIKE '%Men%' THEN "Men's"
            END;

--After inserting the gender of each row into our new Gender column based on a CASE statement in the Product_Name column,
--we will run the below queries to identify if our Case statement is appropriately grabbing identifying the gender of each Product.

--33 rows appear as NULL, this is due to our titling in the webpages not containing any information in regard to the gender of the shoe.
--Even though these shoes do not contain a gender, we will keep this data as it still provides important data on pricing, reviews, and purchases.
SELECT *
FROM running_shoes
WHERE Gender IS NULL
LIMIT 2000;

--After running the above query I was able to find that some of the product names contain an odd character in some of the Men's products "Mens".
--Because of this character I inserted a LIKE case clause "WHEN Product_Name LIKE '%Men%' THEN "Men's"" to identify the men's products without reading
--this odd character in our % wildcard in the LIKE clause. LINE 142


            --Category Column--
            
UPDATE running_shoes
SET Category =
    CASE
        WHEN Product_Name LIKE "%Trail Running%" THEN "Trail Running Shoe"
        WHEN Product_Name LIKE "%Trail%" THEN "Trail Running Shoe"
        WHEN Product_Name LIKE '%Running%' THEN 'Running Shoe'
        WHEN Product_Name LIKE '%Run%' THEN 'Running Shoe'
            END;
            

--Upon furth investigation after creating our 'category' column and inputting our data based on a product name CASE clause (LINE 152),
--some shoes were not labeled as running shoes (or adjacent) but as sneakers, fashion, boots etc...
--So I removed entries where category was left NULL. This could skew our data in future analysis because they do not fit the proper 'running shoes' criteria.
--271 rows were removed.

SELECT *
FROM running_shoes
WHERE Category IS NULL
LIMIT 2000;

DELETE FROM running_shoes
WHERE Category IS NULL;



            --Analyzing 0s in Product Price
            
--Some products in the webpages on Amazon did not contain a product price, so they were given a 0 by our python web scraper.
--We have 29 rows with Product_Price =0 AND Total_Reviews >=1000. I will keep these entries and update appropriate price amounts after further research.

Select *
FROM running_shoes
WHERE Product_Price = 0 
    AND Total_Reviews >=1000
LIMIT 200;


--With the query below I was able to find 127 Products that contain a price = 0, Purchase_in_past_month <50, and Total_Reviews <1000.
--Because of this we will deem these products unpopular given the sorting criteria we used in our python data scraper (only looking at "Best Selling" shoes in the Amazon sorting filter on the webpage).
--127 rows were deleted

Select *
FROM running_shoes
WHERE Product_Price = 0
    AND Purchase_in_past_month <50
    AND Total_Reviews <1000
LIMIT 200;


DELETE FROM running_shoes
WHERE Product_Price = 0
    AND Purchase_in_past_month <50
    AND Total_Reviews <1000;


--What products with a price of 0 are left? 32 rows are left with product price = 0.
--With this small amount of data, this can easily be inserted by researching each product on Amazon (this method can only be considered with a smaller data set and would be easier through spreadsheeting)
SELECT *
FROM running_shoes
WHERE Product_Price = 0;

UPDATE running_shoes
SET Product_Price =
    CASE
        WHEN Product_Name = 'Mens Trace 2 Neutral Running Shoe' THEN 74.95
        WHEN Product_Name = "Men's Air Monarch IV Cross Trainer" THEN 109.99
        WHEN Product_Name = "womens Fresh Foam Roav V1 Running Shoe Sneaker, Black/Light Aluminum, 6.5 US" THEN 74.95
        WHEN Product_Name = "Women's Fresh Foam X 880 V12 Running Shoe" THEN 109.99
        WHEN Product_Name = "Men's Revolution 5 Running Shoe" THEN 60.99
        WHEN Product_Name = "Men's 680 V7 Running Shoe" THEN 64.45
        WHEN Product_Name = "Men's Fresh Foam X 1080 V12 Running Shoe" THEN 124.00
        WHEN Product_Name = "Mens Cascadia 16 GTX Waterproof Trail Running Shoe" THEN 109.95
        WHEN Product_Name = "Women's Revolution 5 Running Shoe" THEN 70.48
        WHEN Product_Name = "Men's Glycerin 19 Neutral Running Shoe" THEN 149.95
        WHEN Product_Name = "Men's Race Running Shoe" THEN 214.99
        WHEN Product_Name = "Men's Ultraboost 20 Running Shoe" THEN 79.06
        WHEN Product_Name = "Alphatorsion 360 Running Shoe" THEN 80.90
        WHEN Product_Name = "Men's Energen Running Shoe" THEN 62.98
        WHEN Product_Name = "Men's VERSABLAST Running Shoe" THEN 67.96
        WHEN Product_Name = "Men's Flex Experience Run 9 Shoe" THEN 149.98
        WHEN Product_Name = "Men's Ultraboost X Running Shoe" THEN 111.22
        WHEN Product_Name = "Men's Viz Runner Cross-trainer" THEN 46.00
        WHEN Product_Name = "Men's Gel-Nimbus 23 Running Shoes" THEN 199.10
        WHEN Product_Name = "Men's Wave Rider 25 Running Shoe" THEN 93.99
        WHEN Product_Name = "Originals Men's NMD_r1 Stlt Primeknit Running Shoe" THEN 132.37
        WHEN Product_Name = "Men's Revolution 6 Nn Running Shoe, Black/University Red, 11" THEN 62.99
        WHEN Product_Name = "Men's Fresh Foam X More V4 Running Shoe" THEN 149.95
        WHEN Product_Name = "Men's Runfalcon 2.0 Running Shoe" THEN 60.82
        WHEN Product_Name = "Men's Low Neck Running Shoes" THEN 153.51
        WHEN Product_Name = "Women's Fresh Foam X 860 V12 Running Shoe" THEN 89.99
        WHEN Product_Name = "Women's NMD_r1 Running Shoe" THEN 74.32
        WHEN Product_Name = "Men's Low-Top Trainers Sneaker" THEN 0.00
        WHEN Product_Name = "Women's Retrorun Running Shoe" THEN 76.99
        WHEN Product_Name = "Women Sport Running Shoes Gym Jogging Walking Sneakers" THEN 19.99
        WHEN Product_Name = "Women's Tanjun Running Shoes" THEN 70.00
        WHEN Product_Name = "Women's Air Zoom Pegasus 36 Running Shoes" THEN 145.00
        ELSE Product_Price
    END;



--After cleaning our data our final step is to move all shoes that fell into the 'Running Shoe' category to our running_shoes table
--162 rows were migrated to our running_shoes table

INSERT INTO trail_running_shoes (Brand, Product_name, Product_Price, Purchase_in_past_month, Total_Reviews, AVG_rating, Date_Uploaded, Gender, Category)
SELECT Brand, Product_name, Product_Price, Purchase_in_past_month, Total_Reviews, AVG_rating, Date_Uploaded, Gender, Category
FROM running_shoes
WHERE Category = 'Trail Running Shoe';

DELETE FROM running_shoes
WHERE Category = 'Trail Running Shoe';


--Finally we will check for any duplicates that got moved from the trail_running_shoes table into our running_shoes table. 

SELECT Brand, Product_Name, Product_Price, Total_Reviews, COUNT(*) AS duplicate_count
FROM running_shoes
GROUP BY Brand, Product_Name, Product_Price, Total_Reviews
HAVING COUNT (*) > 1
LIMIT 200;

--Using a self join to delete our duplicates in the data we migrated to the running_shoe table.
--7 rows were deleted

DELETE RS1
FROM running_shoes RS1
JOIN running_shoes RS2 ON RS1.Brand = RS2.Brand
    AND RS1.Product_Name = RS2.Product_Name
    AND RS1.Product_Price = RS2.Product_Price
    AND RS1.Total_Reviews = RS2.Total_Reviews
WHERE RS1.id < RS2.id; 

--After originally having 2080 rows of data we are left with 1646 rows.

SELECT *
FROM running_shoes
LIMIT 2000;
